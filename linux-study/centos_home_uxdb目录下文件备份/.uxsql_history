end;
\d
\q
\d
\q
\d
\q
show timezone;
show log_timezone;
select now();
\q
show timezone;
show log_timezone;
select now();
show log_timezone;
set log_timezone='PRC';
set log_timezone='PRC';
\q
show log_timezone;
show timezone;
\q
\d
\q
\q
\d
\q
\d
\q
\d
\d
\q
select count(*) from ux_class;
show log_min_error_statement ;
show log_min_duration_statement ;
show client_min_messages ;
show log_min_messages ;
show log_min_error_statement ;
\q
show max_wal_size ;
show min_wal_size ;
show min_wal_size ;
show min_wal_size ;
show max_wal_size;
show max_wal_size;
show min_wal_size;
show min_wal_size;
show min_wal_size;
show min_wal_size;
\q
show max_wal_size ;
show min_wal_size ;
show max_wal_size;
\q
show wal_min_size;
show max_wal_size;
show min_wal_size;
\q
show max_wal_size;
show min_wal_size;
\q
show max_wal_size;
show min_wal_size;
\q
vacuum full;
\q
vacuum;
vacuum full;
vacuum;
vacuum;
vacuum
\q
select createtables(8003,9000);
\q
select createtables(9003,10000);
\q
create or replace function createtables(min int,max int) returns text as$$declaresql varchar;i int;beginfor i in min..max loopsql = 'create table table' || i || '(id serial primary key,name varchar(20),remark varchar(50),datetime timestamp)';execute sql;end loop;return '成功创建table' || min || '到table' || max || '的' || max-min+1 || '张表';end$$language pluxsql;
\q
show max_connection;
show max_connections;
\q
vacuum;
vacuum full;
vacuum;
vacuum full;
\q
vacuum full;
\q
\q
\q
select count(*) from ux_class;
select * from ux_class;
\dt ux_class;
\d ux_class
;
\d ux_class
select * from ux_class limit 1;
select oid, * from ux_class limit 1;
select oid from ux_class;
select oid from (select oid, row_number() over(partition by b.oid) as rowcount from ux_class b ) a where a.rowcount > 1;
select oid , count(*) from ux_class group by oid having count(*) > 1;
select oid from ux_class group by oid having count(*) > 1;
select * from ux_class order by oid;
select oid from ux_class order by oid;
\q
select oid from ux_class where oid=16385;
\d ux_class
select * from ux_class oid=16385;
select * from ux_class where oid=16385;
\q
\q
vacuum;
vacuum full;
vacuum;
vacumm full;
vacuum full;
\q
create table test(id int);
select oid, relname from ux_class order by oid;
\q
vacuum full;
\q
\d
\d
\q
drop table if exists test;
create table test(id int);
drop table if exists test；create table test(id int);
create table test(id int);
drop table if exists test；drop table if exists test；drop table if exists test；
\d
\t
\t
\d
drop table test;
drop table test;
drop table test;
create table test(id int);
drop table if exists test;
\q
drop table if exists test;
drop table if exists test；drop table if exists test；drop table if exists test；drop table if exists test;
drop table if exists test；drop table if exists test；drop table if exists test；drop table if exists test；drop table if exists test;
drop table if exists test；drop table if exists test；drop table if exists test；drop table if exists test；drop table if exists test;
drop table if exists test;
drop table if exists test;
\q
\d
\q
show all instances;
show all instance;
\q
\q
\q
\dt
select * from developer ;
insert into developer values (3, 'liyin',30, 'leader', now());
select * from developer ;
show show instance;
show all instance;
select * from developer ;
select * from developer ;
\q
\dt
select * from developer ;
insert into developer values (4, 'zhaojian',30, 'leader', now());
select * from developer ;
begin ;
insert into developer values (6, 'zhaojian',30, 'leader', now());
commit ;
select * from developer ;
\q
select * from developer ;
\q
show all instance;
insert into developer values (7, 'liyin',30, 'leader', now());
\q
select * from developer ;
insert into developer values (5, 'zhaozongpeng',30, 'leader', now());
select * from developer ;
\q
\d
select * from info;
\q
create table developer(    dno int primary key not null,    dname varchar(20),    dage int,    remark text,    datetime timestamp);
insert into developer values(1,'zhaojian',30,'Project Leader',now());
select * from developer;
insert into developer values(2,'caobaofeng',30,'Development Engineer',now());
select * from developer;
update developer set dage=20 where dno=1;
insert into info select generate_series(1,10000),'info'||(generate_series(1,10000));
insert into info select generate_series(1,10000),'info'||(generate_series(1,10000));
insert into info select generate_series(1,100000),'info'||(generate_series(1,100000));
\q
\d
\dt
\l
\w
create table t1(id int, info text);
\d
create table t1(id int);
\q
\q
\d
create table t1(id int);
\d
\q
\q
\q
\d
create table t1(id int, info text);
insert into t1 values(1, '1');
select * from t1;
\! ps -ef|grep idle
\d
select * from t1;
\q
\d
\d
createdb mydb;
create database mydb;
\c mydb
\d
create table myt(id int, info text);
\q
\d
\d
\d
\q
\d
\! ps -ef|grep idle
select * from t1;
\d
\d
\d
select * from t1;
\d
\d
\d
select now();
select tableid from t01;
\d
select tableid from t1;
\d t1
select * from ux_class;
\d ux_class
select tableoid from t1;
select tablename from t1;
select * from ux_class where relname='t1';
select tableoid from t1;
create table t2 (id int) without oids;
select tableoid from t2;
insert into t2 values(1);
insert into t2 values(1);
insert into t2 values(1);
select tableoid from t2;
select * from ux_attribute ;
select * from ux_attribute where attrelid in (select oid from ux_class where relname='t2');
select tupleid from t2;
select * from t1;
select * from t2;
\d
\d
\d
\d
\d
\d
\d
\h
\?
\d
select sysdate;
select now();
select current_time;
select current_date;
select current_timestamp;
select sysdate;
\q
select sysdate;
select current_timestamp;
select current_timestamp;
\q
select current_timestamp;
select current_timestamp;
\q
select current_timestamp;
\q
select current_timestamp;
select current_user;
select sysdate;
\q
select sysdate;
select SYSDATE;
\q
select sysdate;
select current_timestamp;
\d test
create table test(id int, d date);
\d test
select * from test;
insert into test values(1, '2016-12-10'),(2, '2016-11-22');
select * from test where d < sysdate;
select * from test where d < now();
select to_char(now());
select sysdate;
\q
select sysdate;
\q
select sysdate;
select now();
select current_timestamp;
\d
select test.id from t1;
select tableid from t1;
select tableid from t1;
select tableid from test;
select * from test;
select tableoid from test;
with (select tableoid from test limit 1) t select * from t;
with t as (select tableoid from test limit 1) select * from t;
with t as (select tableoid from test limit 1) select t.tableoid from t;
select t.tableoid from t;
\d
select test.tableoid from test;
select to_char(test.tableoid) from test;
select to_char(23);
select to_char(23, 'FM9999');
select to_char(23, '0');
select test.tableoid from test;
select test.tableoid from test limit 1;
select to_char(test.tableoid, 'FM9999') from test limit 1;
select to_number(test.tableoid, 'FM9999') from test limit 1;
select to_number(test.tableoid, '99999') from test limit 1;
\q
select now();
\q
select now();
\q
select now();
select current_timestamp;
select current_date;
\q
select now();
select system();
select sysdate;
select current_time;
\q
select sysdate;
select * from ux_catalog;
select * from ux_catalog.ux_select * from ux_catalog.ux_select * from ux_catalog.ux_am;
select * from ux_catalog.ux_amop;
\q
select sysdate;
\q
\q
select sysdate;
select sysdate as 11;
select sysdate as sdf;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
select sysdate as sysdate;
\q
select sysdate;
\q
select sysdate;
select sysdate;
select sysdate;
select sysdate::text;
select sysdate::int;
select sysdate as sdf;
select sysdate;
select sysdate;
select sysdate;
create table test (id int, date date);
create table testtbl (id int, date date);
insert into testtbl values(1, '2020-06-10'),(2, '2020-06-13');
select * from testtbl where d < sysdate;
select * from testtbl where date < sysdate;
select * from testtbl;
select * from testtbl where date < sysdate;
select * from testtbl where date < now();
select * from ux_proc;
\d ux_proc
select prorettype from ux_proc;
select * from ux_type;
\d ux_type
select count(*) from ux_type;
\d ux_proc
select oid from ux_type;
select typname from ux_type where oid in (select prorettype from ux_proc);
select typname from ux_type where oid in (select prorettype from ux_proc where proname='now');
select typname from ux_type where oid in (select prorettype from ux_proc where proname='now()');
select typname from ux_type where oid in (select prorettype from ux_proc where proname='now');
select typname from ux_type where oid in (select prorettype from ux_proc where proname='to_char');
cluster student;
cluster test;
create index idx_test_1 on test(id);
\d test
create index idx_test_2 on test(d);
cluster test;
cluster test;
insert into test(1, '2020-06-14');
insert into test values(1, '2020-06-14');
cluster test;
create clustered index idx_test_3 on test(id);
create clustered index idx_test_3 on test;
create cluster index idx_test_3 on test;
cluster test;
cluster test idx_test_1;
cluster test idx_test_1;
\d test
drop index idx_test_1;
drop index idx_test_2;
cluster test using test_ind;
cluster test_ind on test;
create function test() returns timestamp as $$begin return 'now';end;$$ language plpgsql;
create function test() returns timestamp as $$begin return 'now';end;$$ language plpgsql;
create function test() returns timestamp as $$begin return 'now';end;$$ language uxsql;
create function test() returns timestamp as $$begin return 'now';end;$$ language uxpqsql;
create function test() returns timestamp as $$begin return 'now';end;$$ language pluxsql;
select test();
create function test_lhf() returns timestamp as $$begin return 'now';end;$$ language pluxsql;
select test_lhf();
\q
select sysdate;
\q
select sysdate;
\q
select sysdate;
select now();
select timetzdate_pl();
select transaction_timestamp();
\q
select sysdate;
select sysdate();
select now();
\q
c\d
create table t3 (id int) without time;
create table t3 (id int) without oids;
create table t3 (id int) without time;
create table t4 (id int) without time;
create table t4 (id int) with time;
create table t5 (id int) with time;
create table t6 (id int) without time;
create table t7 (id int) with time;
create table t7 (id int) with oids;
\q
create table t8 (id int) with time;
create table t9 (id int) with time;
create table t9 (id int) without time;
\q
create table t9 (id int) without time;
create table t9 (id int) with time;
create table t9 (id int) without time;
\q
create table t9 (id int) without time;
create table t9 (id int) with time;
create table t9 (id int) without time;
\q
create table t9 (id int) without time;
create table t9 (id int) with time;
create table t10 (id int) with time;
create table t10 (id int) with time;
create table t10 (id int) with oids;
create table t11 (id int) with time;
\q
create table t11 (id int) with time;
create table t12 (id int) with time;
\q
create table t12 (id int) with time;
create table t12 (id int) without time;
\d
select * from ux_type;
select typename from ux_type;
select typename from ux_type;
select typname from ux_type;
select typname from ux_type where typname like '%time%';
select sysdate;
select sysdate;
select sysdate;
\q
select sysdate();
select sysdate;
select now();
select now;
select sysdate();
\q
select ux_get_keywords('sdf');
select ux_get_keywords();
select ux_get_keywords();
copy select ux_get_keywords() to '/home/uxdb/keywords.md';
copy "select ux_get_keywords()" to '/home/uxdb/keywords.md';
copy (select ux_get_keywords()) to '/home/uxdb/keywords.md';
\! vi ~/keywords.md
\q
